--------------------------- MODULE C -----------------------------

EXTENDS TLC, Naturals, FiniteSets, Integers

CONSTANTS any, none, Replicas, Values, Ballots, Quorums

VARIABLES messages
VARIABLES decision
VARIABLES maxBallot
VARIABLES maxVBallot
VARIABLES maxValue

P1aMessage == [type : {"P1a"},
               ballot : Ballots \ {0}]
P1bMessage == [type : {"P1b"},
               ballot : Ballots,
               acceptor : Replicas,
               maxVBallot : Ballots,
               maxValue : Values \union {none}]
P2aMessage == [type : {"P2a"},
               ballot : Ballots,
               value : Values \union {any}]
P2bMessage == [type : {"P2b"},
               ballot : Ballots,
               acceptor : Replicas,
               value : Values]
Message == P1aMessage \union P1bMessage \union P2aMessage \union P2bMessage

ASSUME Assume ==
    /\ IsFiniteSet(Replicas)
    /\ any \notin Values \union {none}
    /\ none \notin Values \union {any}
    /\ Ballots \subseteq Nat /\ 0 \in Ballots
    /\ \A q \in Quorums : q \subseteq Replicas
    /\ \A q \in Quorums : Cardinality(Replicas) \div 2 < Cardinality(q)
    /\ \A q, r \in Quorums : q \intersect r # {}

p1aMessages == {m \in messages : m.type = "P1a"}
p1bMessages == {m \in messages : m.type = "P1b"}
p2aMessages == {m \in messages : m.type = "P2a"}
p2bMessages == {m \in messages : m.type = "P2b"}

ForcedValue(M) == (CHOOSE m \in M : \A n \in M : n.maxVBallot <= m.maxVBallot).maxValue

SendMessage(m) == messages' = messages \union {m}

Prepare ==
    /\ UNCHANGED<<decision, maxBallot, maxVBallot, maxValue>>
    /\ \E b \in Ballots \ {0} :
        SendMessage([type |-> "P1a",
                     ballot |-> b])

Promise ==
    /\ UNCHANGED<<decision, maxVBallot, maxValue>>
    /\ \E a \in Replicas, m \in p1aMessages :
        /\ maxBallot[a] < m.ballot
        /\ maxBallot' = [maxBallot EXCEPT ![a] = m.ballot]
        /\ SendMessage([type |-> "P1b",
                        ballot |-> m.ballot,
                        acceptor |-> a,
                        maxVBallot |-> maxVBallot[a],
                        maxValue |-> maxValue[a]])

Accept ==
    /\ UNCHANGED<<decision, maxBallot, maxVBallot, maxValue>>
    /\ \E b \in Ballots, q \in Quorums, v \in Values :
        /\ \A m \in p2aMessages : ~(m.ballot = b)
        /\ LET M == {m \in p1bMessages : m.ballot = b /\ m.acceptor \in q}
           IN /\ \A a \in q : \E m \in M : m.acceptor = a
              /\ \/ \A m \in M : m.maxValue = none
                 \/ v = ForcedValue(M)
              /\ SendMessage([type |-> "P2a",
                              ballot |-> b,
                              value |-> v])

Accepted ==
    /\ UNCHANGED<<decision>>
    /\ \E a \in Replicas, m \in p2aMessages :
        /\ m.value \in Values
        /\ maxBallot[a] <= m.ballot
        /\ maxBallot' = [maxBallot EXCEPT ![a] = m.ballot]
        /\ maxVBallot' = [maxVBallot EXCEPT ![a] = m.ballot]
        /\ maxValue' = [maxValue EXCEPT ![a] = m.value]
        /\ SendMessage([type |-> "P2b",
                        ballot |-> m.ballot,
                        acceptor |-> a,
                        value |-> m.value])

Decide ==
    /\ UNCHANGED<<messages, maxBallot, maxVBallot, maxValue>>
    /\ \E b \in Ballots, q \in Quorums :
        LET M == {m \in p2bMessages : m.ballot = b /\ m.acceptor \in q}
        IN /\ \A a \in q : \E m \in M : m.acceptor = a
           /\ \E m \in M : decision' = m.value

TypeOK == /\ messages \subseteq Message
               /\ decision \in Values \union {none}
               /\ maxBallot \in [Replicas -> Ballots]
               /\ maxVBallot \in [Replicas -> Ballots]
               /\ maxValue \in [Replicas -> Values \union {none}]

Init == /\ messages = {}
             /\ decision = none
             /\ maxBallot = [r \in Replicas |-> 0]
             /\ maxVBallot = [r \in Replicas |-> 0]
             /\ maxValue = [r \in Replicas |-> none]

Next == \/ Prepare
             \/ Promise
             \/ Accept
             \/ Accepted
             \/ Decide

Spec == /\ Init
             /\ [][Next]_<<messages, decision, maxBallot, maxVBallot, maxValue>>
             /\ SF_<<messages, decision, maxBallot, maxVBallot, maxValue>>(Decide)

Nontriviality ==
    /\ \/ decision = none
       \/ \E m \in p2aMessages : m.value = decision
    /\ \A m \in p1bMessages : /\ m.maxValue \in Values \/ 0 = m.maxVBallot
                              /\ m.maxValue = none \/ 0 < m.maxVBallot

Consistency == [][decision = none]_<<decision>>

Liveness == FALSE

Symmetry == Permutations(Values) \union Permutations(Replicas)

===============================================================


--------------------------- MODULE CC -----------------------------

EXTENDS C

CONSTANTS FastQuorums, FastBallots

VARIABLES cValue

ClassicBallots == Ballots \ FastBallots

FastAssume ==
    /\ \A q \in FastQuorums : q \subseteq Replicas
    /\ \A q, r \in FastQuorums : q \intersect r # {}
    /\ \A q \in FastQuorums : (3 * Cardinality(Replicas)) \div 4 <= Cardinality(q)
    /\ \A q \in Quorums : \A r, s \in FastQuorums : q \intersect r \intersect s # {}

ASSUME Assume /\ FastAssume

IsMajorityValue(M, v) == Cardinality(M) \div 2 < Cardinality({m \in M : m.value = v})

FastAny ==
    /\ UNCHANGED<<decision, maxBallot, maxVBallot, maxValue, cValue>>
    /\ \E f \in FastBallots :
        /\ SendMessage([type |-> "P2a",
                        ballot |-> f,
                        value |-> any])

FastPropose ==
    /\ UNCHANGED<<decision, cValue>>
    /\ \E a \in Replicas, m \in p2aMessages, v \in Values:
        /\ m.value = any
        /\ maxBallot[a] <= m.ballot
        /\ maxValue[a] = none \/ maxValue[a] = v
        /\ maxBallot' = [maxBallot EXCEPT ![a] = m.ballot]
        /\ maxVBallot' = [maxVBallot EXCEPT ![a] = m.ballot]
        /\ maxValue' = [maxValue EXCEPT ![a] = v]
        /\ \A n \in p2bMessages : ~(n.ballot = m.ballot /\ n.acceptor = a)
        /\ SendMessage([type |-> "P2b",
                        ballot |-> m.ballot,
                        acceptor |-> a,
                        value |-> v])

FastDecide ==
    /\ UNCHANGED<<messages, maxBallot, maxVBallot, maxValue, cValue>>
    /\ \E b \in FastBallots, q \in FastQuorums :
        LET M == {m \in p2bMessages : m.ballot = b /\ m.acceptor \in q}
            V == {w \in Values : \E m \in M : w = m.value}
        IN /\ \A a \in q : \E m \in M : m.acceptor = a
           /\ 1 = Cardinality(V)
           /\ \E m \in M : decision' = m.value

ClassicAccept ==
    /\ UNCHANGED<<decision, maxBallot, maxVBallot, maxValue>>
    /\ \E b \in ClassicBallots, f \in FastBallots, q \in FastQuorums, v \in Values :
        /\ f < b
        /\ cValue = none \/ cValue = v
        /\ cValue' = v
        /\ \A m \in p2aMessages : m.ballot # b
        /\ LET M == {m \in p2bMessages : m.ballot = f /\ m.acceptor \in q}
               V == {w \in Values : \E m \in M : w = m.value}
           IN /\ \A a \in q : \E m \in M : m.acceptor = a
              /\ 1 < Cardinality(V)
              /\ IF \E w \in V : IsMajorityValue(M, w)
                 THEN IsMajorityValue(M, v)
                 ELSE v \in V
              /\ SendMessage([type |-> "P2a",
                              ballot |-> b,
                              value |-> v])

ClassicAccepted ==
    /\ UNCHANGED<<cValue>>
    /\ Accepted

ClassicDecide ==
    /\ UNCHANGED<<messages, maxBallot, maxVBallot, maxValue, cValue>>
    /\ \E b \in ClassicBallots, q \in Quorums :
        LET M == {m \in p2bMessages : m.ballot = b /\ m.acceptor \in q}
        IN /\ \A a \in q : \E m \in M : m.acceptor = a
           /\ \E m \in M : decision' = m.value

FastTypeOK == /\ TypeOK
              /\ cValue \in Values \union {none}

FastInit == /\ Init
            /\ cValue = none

FastNext == \/ FastAny
            \/ FastPropose
            \/ FastDecide
            \/ ClassicAccept
            \/ ClassicAccepted
            \/ ClassicDecide

FastSpec == /\ FastInit
            /\ [][FastNext]_<<messages, decision, maxBallot, maxVBallot, maxValue, cValue>>
            /\ SF_<<messages, decision, maxBallot, maxVBallot, maxValue, cValue>>(FastDecide)
            /\ SF_<<messages, decision, maxBallot, maxVBallot, maxValue, cValue>>(ClassicDecide)

FastNontriviality == \/ decision = none
                     \/ \E m \in p2bMessages : m.value = decision /\ m.ballot \in FastBallots

===============================================================
